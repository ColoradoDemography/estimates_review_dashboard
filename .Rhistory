head(AT_Soccer, 3)
# prepare content
content <- list(
function(x) { sum(x) },
function(x) { round(sum(x), 2) },
function(x) { round(sum(x), 2) },
newSparkLine(lineWidth = 2, pointWidth = 6), newSparkBar()
)
names(content) <- c("Points", "ShotGoal", "GetGoal", "GoalDiff", "WinLose")
# set variables
vars <- c("points", "shotgoal", "getgoal", "goaldiff", "wl")
# create the sparkTable object
stab <- newSparkTable(dataObj = AT_Soccer, tableContent = content, varType = vars)
export(stab, outputType = 'html')
export(stab, outputType = 'html', graphNames="out")
export(stab, outputType=c('pdf','png'), filename='myFirstSparkLine')
hw1_data=read.csv("C:/Users/rkemp/Downloads/hw1_data.csv")
names(hw_data)
names(hw1_data)
hw1_data[,is.na(hw1_data$Ozone)]
is.na(hw1_data$Ozone)
hw1_data[bad][,1]
bad=is.na(hw1_data$Ozone)
hw1_data[bad][,1]
hw1_data[,bad]
hw1_data[,1]
hw1_data[,1][bad]
bad=is.na(hw1_data$Ozone)
hw1_data[,1][bad]
length(hw1_data[,1][bad])
bad
str(hw1_data)
hw1_data$Ozone
is.na(hw1_data$Ozone)
library(dplyr)
data=filter(hw1_data, Temp>90, Ozone>31)
View(data)
m=mean(data$Solar.R)
m
hw1_data[(hw1_data$Temp>90)]
hw1_data=read.csv("C:/Users/rkemp/Downloads/hw1_data.csv", header=TRUE)
hw1_data[(hw1_data$Temp>90)]
hw1_data[hw1_data$Temp>90,]
hw1_data[hw1_data$Temp>90 & hw_1data$Ozone>31,]
hw1_data[hw1_data$Temp>90 & hw1_data$Ozone>31,]
mean(hw1_data$Solar.R[hw1_data$Temp>90 & hw1_data$Ozone>31,], na.rm=TRUE)
View(hw1_data)
d=hw1_data[hw1_data$Temp>90 & hw1_data$Ozone>31,]
mean(d$Solar.R, na.rm=TRUE)
setNA <- defmacro(df,var,val,
expr={df$var[df$var == val] <- NA}
)
f <- function(x) { g <- function(y) { y + z } z <- 4 x + g(x) }
f <- function(x) {
g <- function(y) { y + z }
z <- 4 x + g(x) }
f <- function(x) {
g <- function(y) { y + z }
z <- x + g(x) }
f(3)
f <- function(x) {
g <- function(y) { y + z }
z <-4
x + g(x) }
f(3)
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
View(ip)
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
View(ip)
getwd()
write.csv("AllRPackages_Jun12_2015.csv", ip)
write.csv(ip, "AllRPackages_Jun12_2015.csv")
devtools::install_github("robkemp/robR")
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
write.csv(ip, "AllRPackages_Jun15_2015.csv")
getwd()
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
write.csv(ip, paste0("AllRPackages_", Sys.Date(), ".csv"))
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
write.csv(ip, paste0("AllRPackages_", Sys.Date(), ".csv"), row.names = FALSE)
dir.create("Output")
# ACS PUMS Project Set-up
### NOTE: Meant to be Run AFTER creating an RStudio Project for the Pull
# Create an Output Directory that will house the Plots and Data from the project
dir.create("Output")
dir.create("Output/Plots")
dir.create("Output/Data")
dir.create("R")
# Copy the ACS DB connection file
file.copy("J:/Data Requests/Rob Requests/ACS PUMS Requests/acs_dbcon.R", to=getwd())
install.packages(leaflet)
install.packages('leaflet')
geojson <- readLines("http://54.69.15.55/CensusAPI/geojson.php?table=p1&sumlev=50&db=c1990&state=8&bb=-105,40,-104,39&zoom=10", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
library(leaflet)
library(jsonlite)
geojson <- readLines("http://54.69.15.55/CensusAPI/geojson.php?table=p1&sumlev=50&db=c1990&state=8&bb=-105,40,-104,39&zoom=10", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
leaflet() %>% addGeoJSON(geojson)
readLines("http://54.69.15.55/CensusAPI/geojson.php?table=p1&sumlev=50&db=c1990&state=8&bb=-105,40,-104,39&zoom=10", warn = FALSE)
gdp_md_est <- sapply(geojson$features, function(feat) {
feat$properties$p1001
})
gdp_mp_est
gdp_md_est
pal <- colorQuantile("Greens", p1001)
p1001 <- sapply(geojson$features, function(feat) {
feat$properties$p1001
})
pal <- colorQuantile("Greens", p1001)
pal <- colorQuantile("Greens", as.numeric(p1001))
geojson$features <- lapply(geojson$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(
feat$properties$p1001)
)
feat
})
geojson$features <- lapply(geojson$features, function(feat) {
feat$properties$style <- list(
fillColor = pal(
as.numeric(feat$properties$p1001))
)
feat
})
leaflet() %>% addGeoJSON(geojson)
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
leaflet() %>% addGeoJSON(geojson)
leaflet() %>% addTiles()%>% addGeoJSON(geojson)
?setView
m = leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 18)
m
leaflet() %>%
addTiles()%>%
clearBounds()%>%
addGeoJSON(geojson)%>%
addMarkers(geojson$features$properties$p1001)
geojson
leaflet() %>%
addTiles()%>%
clearBounds()%>%
addGeoJSON(geojson)%>%
addMarkers(geojson$features$geometry$coordinates, geojson$features$properties$p1001)
latlong=sapply(geojson$features$geometry, function(feat){
feat$coordinates
})
leaflet() %>%
addTiles()%>%
clearBounds()%>%
addGeoJSON(geojson)%>%
addMarkers(latlong, geojson$features$properties$p1001)
latlong=sapply(geojson$features, function(feat){
feat$geometry$coordinates
})
leaflet() %>%
addTiles()%>%
clearBounds()%>%
addGeoJSON(geojson)%>%
addMarkers(latlong, geojson$features$properties$p1001)
leaflet() %>%
addTiles()%>%
clearBounds()%>%
addGeoJSON(geojson)%>%
addPopups(latlong, geojson$features$properties$p1001)
latlong=sapply(geojson$features, function(feat){
as.data.frame(feat$geometry$coordinates, feat$properties$p1001)
})
latlong
latlong=sapply(geojson$features, function(feat){
as.data.frame(feat$geometry$coordinates, feat$properties$p1001)
})
latlong=tapply(geojson$features, function(feat){
as.data.frame(feat$geometry$coordinates, feat$properties$p1001)
})
latlong=apply(geojson$features, function(feat){
as.data.frame(feat$geometry$coordinates, feat$properties$p1001)
})
latlong=sapply(geojson$features, function(feat){
as.data.frame(feat$geometry$coordinates, feat$properties$p1001)
})
leaflet() %>%
addTiles()%>%
clearBounds()%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-105.40,-104.39, zoom=10)%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-105.40,-39, zoom=10)%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-105,-40, zoom=10)%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-40,-105, zoom=10)%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-105,40, zoom=10)%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-105,40, zoom=6)%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-105,40, zoom=8)%>%
addGeoJSON(geojson)
leaflet() %>%
addTiles()%>%
setView(-105,40, zoom=7)%>%
addGeoJSON(geojson)
library(dplyr)
library(readr)
system.time(x=read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusa.csv"))
system.time(assign(x,read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusa.csv")))
View(x)
system.time(read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusa.csv"))
d=x%>%
filter(ST==8)%>%
group_by(PUMA)%>%
summarize(WGTP)
names(x)
d=x%>%
filter(ST==8)%>%
group_by(PUMA10)%>%
summarize(PWGTP)
d=x%>%
filter(ST==8)%>%
group_by(PUMA10)%>%
summarize(total=sum(PWGTP))
d
x=read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusa.csv")%>%
bind_rows(read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusb.csv"))
1450+1364
d=x%>%
filter(ST==8)%>%
group_by(PUMA10)%>%
summarize(total=sum(PWGTP))
View(d)
names(x)
d=x%>%
filter(ST==8)%>%
group_by(PUMA)%>%
summarize(total=sum(PWGTP))
d
library(codemogProfile)
cp_countymap("011")
cp_laborforceage("011", "Bent")
cp_laborforceage("011", "Bent", base=12)
x=read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusa.csv")%>%
bind_rows(read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusb.csv", skip=1))
names(x)
y=read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13pusb.csv")
problems()
problems(x)
problems(y)
View(y)
rm(x)
rm(y)
x=read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13husa.csv")
y=read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13husb.csv")
View(pred.w.clim)
rm(x)
rm(y)
x=read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13husa.csv")%>%
bind_rows(read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13husb.csv"))%>%
bind_rows(read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13husc.csv"))%>%
bind_rows(read_csv("C:/Users/RKemp/Desktop/acs13pums/ss13husd.csv"))
devtools::install_github("ramnathv/rCharts")
rm(x)
library(rCharts)
detach(rCharts)
library("rCharts", lib.loc="~/R/win-library/3.2")
detach("package:rCharts", unload=TRUE)
library(codemogProfile)
cp_indchange("009", "Baca")
cp_indShare("009", "Baca")
cp_jobShare("009", "Baca")
detach("package:codemog", unload=TRUE)
detach("package:codemogProfile", unload=TRUE)
library("codemog", lib.loc="~/R/win-library/3.2")
detach("package:codemog", unload=TRUE)
detach("package:ggthemes", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:gridExtra", unload=TRUE)
detach("package:mapproj", unload=TRUE)
detach("package:maps", unload=TRUE)
detach("package:maptools", unload=TRUE)
detach("package:RCurl", unload=TRUE)
detach("package:scales", unload=TRUE)
detach("package:sp", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:car", unload=TRUE)
detach("package:bitops", unload=TRUE)
library("bitops", lib.loc="~/R/win-library/3.2")
library(codemogProfile)
cp_poptrend("073", "Lincoln")
states=read_csv("NST-EST2014-01.csv")
##############################################
#     Bin the Population Figures for Scott
##############################################
library(readr)
library(car)
library(dplyr)
library(tidyr)
setwd("J:/Estimates/Admin/AppDevelopment/estimates_review_dashboard")
states=read_csv("NST-EST2014-01.csv")
View(states)
states=read_csv("NST-EST2014-01.csv")%>%
select(state, y2014)
View(states)
states=read_csv("NST-EST2014-01.csv")%>%
select(state, y2014)
states=read_csv("NST-EST2014-01.csv")%>%
select(state, y2014)%>%
mutate(recode(popCat, "0:999999=1; 1000000:1999999=2;2000000:4999999=3;5000000:9999999=4; 10000000:50000000=5 "))
states=read_csv("NST-EST2014-01.csv")%>%
select(state, y2014)%>%
mutate(popCat=recode(y2014, "0:999999=1; 1000000:1999999=2;2000000:4999999=3;5000000:9999999=4; 10000000:50000000=5 "))
states=read_csv("NST-EST2014-01.csv")%>%
select(state, y2014)%>%
mutate(popCat=recode(y2014, "0:999999=1; 1000000:1999999=2;2000000:4999999=3;5000000:9999999=4; 10000000:50000000=5 "))%>%
group_by(popCat)%>%
summarize(States=n())
states=read_csv("NST-EST2014-01.csv")%>%
select(state, y2014)%>%
mutate(popCat=recode(y2014, "0:999999=1; 1000000:1999999=2;2000000:4999999=3;5000000:9999999=4; 10000000:50000000=5 "),
popCat=ordered(popCat, levels=1:5, labels=c("0 to 999,999","1,000,000 to 1,999,999", "2,000,000 to 4,999,999",
"5,000,000 to 9,999,999", "10,000,000 or More")))%>%
group_by(popCat)%>%
summarize(States=n())
states=read_csv("NST-EST2014-01.csv")%>%
select(state, y2014)
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)
hist(county_area$ALAND)
hist(county_area$ALAND/1000000)
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/100000
landCat=cut(land, breaks=c(0,1999, 3999,5999,7999,15000)),
landCat=ifelse(COUNTYFP==14, 1, landCat),
landCat=ordered(landCat, levels=1:4, labels=c("0 to 2,000", "2,060 to 3707", "3,708 to 5,172", "5,173 or More")))%>%
group_by(landCat)%>%
summarise(Counties=n())
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/100000,
landCat=cut(land, breaks=c(0,1999, 3999,5999,7999,15000)),
landCat=ifelse(COUNTYFP==14, 1, landCat),
landCat=ordered(landCat, levels=1:4, labels=c("0 to 2,000", "2,060 to 3707", "3,708 to 5,172", "5,173 or More")))%>%
group_by(landCat)%>%
summarise(Counties=n())
View(county_area)
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/100000,
landCat=cut(land, breaks=c(0,1999, 3999,5999,7999,15000))
)
View(county_area)
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,1999, 3999,5999,7999,15000))
)
View(county_area)
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,1999, 3999,5999,7999,15000), labels=c("1","2","3","4")),
landCat=ordered(landCat, levels=1:4, labels=c("0 to 2,000", "2,060 to 3707", "3,708 to 5,172", "5,173 or More")))%>%
group_by(landCat)%>%
summarise(Counties=n())
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,1999, 3999,5999,7999,15000), labels=c("1","2","3","4", "5"))
)
View(county_area)
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,1999, 3999,5999,7999,15000), labels=c("1","2","3","4", "5")),
landCat=ordered(landCat, levels=1:5, labels=c("0 to 1,999", "2,000 to 3,999", "4,000 to 5,999", "6,000 to 7,999",
"8,000 or More")))%>%
group_by(landCat)%>%
summarise(Counties=n())
View(county_area)
muni_area=read_csv("muni_land_area.csv")%>%
select(PLACEFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000
)
hist(muni_area$land)
plot(muni_area$land)
hist(muni_area$land)
hist(muni_area$land, bin=12)
hist(muni_area$land, breaks=12)
warnings()
hist(muni_area$land, breaks=12)
hist(muni_area$land, breaks=40)
hist(muni_area$land[muni_area$land<200], breaks=40)
hist(muni_area$land[muni_area$land<100], breaks=40)
muni_area=read_csv("muni_land_area.csv")%>%
select(PLACEFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,4, 9,19,39,500), labels=c("1","2","3","4", "5")),
landCat=ordered(landCat, levels=1:5, labels=c("0 to 4", "5 to 9", "10 to 19", "20 to 39",
"40 or More")))%>%
group_by(landCat)%>%
summarise(Municipalities=n())
View(muni_area)
muni_area=read_csv("muni_land_area.csv")%>%
select(PLACEFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,4, 9,19,39,500), labels=c("1","2","3","4", "5")),
landCat=ordered(landCat, levels=1:5, labels=c("0 to 4", "5 to 9", "10 to 19", "20 to 39",
"40 or More")))
View(county_area)
muni_area=read_csv("muni_land_area.csv")%>%
select(PLACEFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,4, 9,19,39,600), labels=c("1","2","3","4", "5")),
landCat=ordered(landCat, levels=1:5, labels=c("0 to 4", "5 to 9", "10 to 19", "20 to 39",
"40 or More")))%>%
group_by(landCat)%>%
summarise(Municipalities=n())
View(muni_area)
muni_area=read_csv("muni_land_area.csv")%>%
select(PLACEFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000
)
nrows(muni_area)
rows(muni_area)
nrow(muni_area)
muni_area=read_csv("muni_land_area.csv")
View(muni_area)
muni_area=read_csv("muni_land_area.csv")%>%
filter(FUNCSTAT=="A")%>%
select(PLACEFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000,
landCat=cut(land, breaks=c(0,4, 9,19,39,600), labels=c("1","2","3","4", "5")),
landCat=ordered(landCat, levels=1:5, labels=c("0 to 4", "5 to 9", "10 to 19", "20 to 39",
"40 or More")))%>%
group_by(landCat)%>%
summarise(Municipalities=n())
View(muni_area)
muni_area=read_csv("muni_land_area.csv")%>%
filter(FUNCSTAT=="A")%>%
select(PLACEFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000
)
View(muni_area)
county_area=read_csv("county_land_area.csv")%>%
select(COUNTYFP, NAME, ALAND)%>%
mutate(land=ALAND/1000000
)
View(county_area)
View(states)
county=read_csv("county_estimates_current.csv")%>%
select(county, countyfips, Population_2014)%>%
filter(countyfips!=0)%>%
mutate(popCat=recode(Population_2014, "0:4999=1; 5000:9999=2; 10000:24999=3; 25000:69999=4; 70000:700000=5"),
popCat=ordered(popCat, levels=1:5, labels=c("0 to 4,999", "5,000 to 9,999", "10,000 to 24,999", "25,000 to 69,999",
"70,000 or more")))%>%
group_by(popCat)
View(county)
muni=read_csv("muni_estimates_current.csv")%>%
filter(placefips!=99990, MuniTotalFlag==1)%>%
select(municipality, placefips, totalpopulation_2014)%>%
mutate(popCat=recode(totalpopulation_2014, "0:199=1;200:499=2;500:999=3; 1000:2499=4; 2500:9999=5; 10000:19999=6;
20000:49999=7;50000:700000=8"),
popCat=ordered(popCat, levels=1:8, labels=c("0 to 199", "200 to 499", "500 to 999","1,000 to 2,499",
"2,500 to 9,999", "10,000 to 19,999", "20,000 to 49,000",
"50,000 or More")))%>%
group_by(popCat)
View(muni)
shiny::runApp()
shiny::runApp()
sd_names=read.csv("district_estimates_current.csv", stringsAsFactors = FALSE)%>%
filter(year==2010)
sd_names=read.csv("district_estimates_current.csv", stringsAsFactors = FALSE)
View(sd_names)
sd_names=read.csv("district_estimates_current.csv", stringsAsFactors = FALSE)%>%
select(LGID, Areaname)
sd_names=read.csv("district_estimates_current.csv", stringsAsFactors = FALSE)%>%
select(LG_ID, Areaname)
View(sd_names)
shiny::runApp()
shiny::runApp()
runApp()
